{
  "version": 3,
  "sources": ["../../yup-password/index.js", "dep:yup-password"],
  "sourcesContent": ["'use strict'\n\n// pluralize\nconst p = function (word, num) {\n    return num === 1 ? word : `${word}s`\n}\n\nconst isNullOrUndefined = function (value) {\n    return value === null || value === undefined\n}\n\nfunction minLowercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} lowercase ' + p('letter', length)\n    return this.test({\n        name: 'minLowercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[a-z]/g) || []).length >= length\n        }\n    })\n} // minLowercase()\n\nfunction minUppercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} uppercase ' + p('letter', length)\n    return this.test({\n        name: 'minUppercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[A-Z]/g) || []).length >= length\n        }\n    })\n} // minUppercase()\n\nfunction minNumbers(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('number', length)\n    return this.test({\n        name: 'minNumber',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[0-9]/g) || []).length >= length\n        }\n    })\n} // minNumber()\n\nfunction minSymbols(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('symbol', length)\n    return this.test({\n        name: 'minSymbol',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length\n        }\n    })\n} // minSymbol()\n\nfunction minRepeating(length = 2, message) {\n    const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length)\n    return this.test({\n        name: 'minRepeating',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || ! new RegExp(`(.)\\\\1{${length},}`).test(value)\n        }\n    })\n} // minRepeating()\n\nfunction minWords(length = 2, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('word', length)\n    const rx = new RegExp('[a-zA-Z0-9]')\n    return this.test({\n        name: 'minWords',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || value.split(' ').filter(v => !! v && rx.test(v)).length >= length\n        }\n    })\n} // minWords()\n\nfunction password() {\n    return this\n        .min(8)\n        .max(250)\n        .minLowercase(1)\n        .minUppercase(1)\n        .minNumbers(1)\n        .minSymbols(1)\n} // password()\n\nfunction setup(yup) {\n    yup.addMethod(yup.string, 'minLowercase', minLowercase)\n    yup.addMethod(yup.string, 'minUppercase', minUppercase)\n    yup.addMethod(yup.string, 'minNumber', minNumbers)\n    yup.addMethod(yup.string, 'minNumbers', minNumbers)\n    yup.addMethod(yup.string, 'minSymbol', minSymbols)\n    yup.addMethod(yup.string, 'minSymbols', minSymbols)\n    yup.addMethod(yup.string, 'minRepeating', minRepeating)\n    yup.addMethod(yup.string, 'minWords', minWords)\n    yup.addMethod(yup.string, 'password', password)\n}\n\nmodule.exports = setup\n", "export default require(\"./node_modules/yup-password/index.js\");"],
  "mappings": "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",
  "names": []
}
